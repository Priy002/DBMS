DDL includes commands such as CREATE, ALTER and DROP statements.
1. CREATE
The CREATE TABLE statement is used to create a new table in a database.
Syntax
CREATE TABLE table_name (
 column1 datatype,
 column2 datatype,
 column3 datatype,
 ....
);
Example
CREATE TABLE Persons (
 PersonID int,
 LastName varchar(255),
 FirstName varchar(255),
 Address varchar(255),
 City varchar(255)
);

2. ALTER
The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.
The ALTER TABLE statement is also used to add and drop various constraints on an existing table.
1. ALTER TABLE - ADD Column
To add a column in a table
Syntax:
ALTER TABLE table_name ADD column_name datatype;
Example
ALTER TABLE Customers ADD Email varchar(255);
2. ALTER TABLE - DROP COLUMN
To delete a column in a table,(notice that some database systems don't allow deleting a column):
syntax
ALTER TABLE table_name DROP COLUMN column_name;
Example
ALTER TABLE Customers DROP COLUMN Email;
3. ALTER TABLE - MODIFY COLUMN
To change the data type of a column in a table
syntax:
ALTER TABLE table_name MODIFY COLUMN column_name datatype;
Example
ALTER TABLE Persons ADD DateOfBirth date;

3. Drop
 The DROP TABLE statement is used to drop an existing table in a database.
 Syntax
 DROP TABLE table_name;
 Example
 DROP TABLE Shippers;

4. TRUNCATE
The TRUNCATE statement is used to delete the data inside a table, but not the table itself.
Syntax
TRUNCATE TABLE table_name;
 Example
 TRUNCATE TABLE Shippers;

5. RENAME
 RENAME statement you can rename a table.
Syntax
RENAME TABLE (tbl_name) TO (new_tbl_name);
Example
RENAME table student to info;


DML
DML is short name of Data Manipulation Language which deals with data manipulation and includes most
common SQL statements such SELECT, INSERT, UPDATE, DELETE, etc., and it is used to store, modify,
retrieve, delete and update data in a database.
1. SELECT
The SELECT statement is used to select data from a database.
Syntax
SELECT column1, column2, ...FROM table_name;
Example
SELECT CustomerName, City, Country FROM Customers;
Syntax
SELECT * FROM table_name;
Example
SELECT * FROM Customers;

2. INSERT
The INSERT INTO statement is used to insert new records in a table. It is possible to write the INSERT INTO
statement in two ways:

i. Specify both the column names and the values to be inserted:
Syntax
INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);
Example
INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');

ii. If you are adding values for all the columns of the table, you do not need to specify the column names in the
SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here,
the INSERT INTO syntax would be as follows:
Syntax
INSERT INTO table_name
VALUES (value1, value2, value3, ...);
Example
INSERT INTO Customers (CustomerName, City, Country)VALUES ('Cardinal', 'Stavanger', 'Norway');

3. UPDATE
The UPDATE statement is used to modify the existing records in a table.
Syntax
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
Example
UPDATE Customers
SET ContactName = 'Alfred Schmidt', City = 'Frankfurt'
WHERE CustomerID = 1;

4. DELETE
The DELETE statement is used to delete existing records in a table.
Syntax
DELETE FROM table_name WHERE condition;
Example
DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';



Views

1. CREATE VIEW
Syntax
CREATE VIEW view_name AS SELECT column1, column2, ... FROM table_name WHERE condition;
Examples
CREATE VIEW [Brazil Customers] AS SELECT CustomerName, ContactName FROM Customers
WHERE Country = 'Brazil';
SELECT * FROM [Brazil Customers];

2. CREATE OR REPLACE VIEW
Syntax
CREATE OR REPLACE VIEW view_name AS SELECT column1, column2, ... FROM table_name
WHERE condition;
Examples
CREATE OR REPLACE VIEW [Brazil Customers] AS SELECT CustomerName, ContactName, City
FROM Customers WHERE Country = 'Brazil';

3. Dropping a View
A view is deleted with the DROP VIEW statement.
Syntax
DROP VIEW view_name;
Example
DROP VIEW Brazil-Customers


Sequence 
Auto-increment allows a unique number to be generated automatically when a new record is inserted into a
table.
• Often this is the primary key field that we would like to be created automatically every time a new record
is inserted.
Example
CREATE TABLE Persons (
 Personid int NOT NULL AUTO_INCREMENT,
 LastName varchar(255) NOT NULL,
 FirstName varchar(255),
 Age int,
 PRIMARY KEY (Personid)
);
• By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.
• To let the AUTO_INCREMENT sequence start with another value, use the following SQL statement:
Example
ALTER TABLE Persons AUTO_INCREMENT=100;
INSERT INTO Persons (FirstName,LastName)VALUES ('Lars','Monsen');


SYNONYM
A SYNONYM provides another name for database object, referred to as original object, that may exist on a local or
another server.
Syntax
Call sys.create_synonym_db(‘old database name’,’new database name’);
Example
Call sys.create_synonym_db(‘student,’information);




Constraints
• Constraints are used to specify rules for data in a table.
• Constraints are used to limit the type of data that can go into a table. 
Types of constraints
1) NOT NULL Constraint
2) Unique Constraint
3) Primary key
4) Foreign key
5) Check constraint
6) Default constraint


1) NOT NULL Constraint
• By default, a column can hold NULL values.
• The NOT NULL constraint enforces a column to NOT accept NULL values.
• This enforces a field to always contain a value, which means that you cannot insert a new record, or update a
record without adding a value to this field.
NOT NULL on CREATE TABLE
Example
CREATE TABLE Persons (ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255) NOT
NULL, Age int);
NOT NULL on ALTER TABLE
Example
ALTER TABLE Persons
MODIFY COLUMN Age int NOT NULL;


2) UNIQUE Constraint
• The UNIQUE constraint ensures that all values in a column are different.
• Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of
columns.
• A PRIMARY KEY constraint automatically has a UNIQUE constraint.
• However, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.
i.UNIQUE Constraint on CREATE TABLE(One column)
Example
CREATE TABLE Persons (
 ID int NOT NULL,
 LastName varchar(255) NOT NULL,
 FirstName varchar(255),
 Age int,
 UNIQUE (ID)
);

ii.UNIQUE Constraint on CREATE TABLE(Multiple column)
Example
CREATE TABLE Persons (
 ID int NOT NULL,
 LastName varchar(255) NOT NULL,
 FirstName varchar(255),
 Age int,
 CONSTRAINT UC_Person UNIQUE (ID,LastName)
);

iii.UNIQUE Constraint on ALTER TABLE(One column)
Example
ALTER TABLE Persons ADD UNIQUE (ID);
UNIQUE Constraint on ALTER TABLE(Multiple column)
Example
ALTER TABLE Persons ADD CONSTRAINT UC_Person UNIQUE (ID,LastName);

iv.DROP a UNIQUE Constraint
Example
ALTER TABLE Persons DROP INDEX UC_Person;



3) PRIMARY KEY Constraint
• The PRIMARY KEY constraint uniquely identifies each record in a table.
• Primary keys must contain UNIQUE values, and cannot contain NULL values.
• A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple
columns (fields).
PRIMARY KEY on CREATE TABLE
Example
CREATE TABLE Persons (
 ID int NOT NULL,
 LastName varchar(255) NOT NULL,
 FirstName varchar(255),
 Age int,
 PRIMARY KEY (ID)
);
PRIMARY KEY on ALTER TABLE
Example
ALTER TABLE Persons ADD PRIMARY KEY (ID);
DROP a PRIMARY KEY Constraint
Example
ALTER TABLE Persons DROP PRIMARY KEY;

4) Foreign key constraint
• The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.
• A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another
table.
• The table with the foreign key is called the child table, and the table with the primary key is called the
referenced or parent table.
FOREIGN KEY on CREATE TABLE
Example
CREATE TABLE Orders (
 OrderID int NOT NULL,
 OrderNumber int NOT NULL,
 PersonID int,
 PRIMARY KEY (OrderID),
 FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
);
FOREIGN KEY on ALTER TABLE
Example
ALTER TABLE Orders ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);
DROP a FOREIGN KEY Constraint
Example
ALTER TABLE Orders DROP FOREIGN KEY FK_PersonOrder;

5) Check Constraint
• The CHECK constraint is used to limit the value range that can be placed in a column.
• If you define a CHECK constraint on a column it will allow only certain values for this column.
• If you define a CHECK constraint on a table it can limit the values in certain columns based on values in other
columns in the row.
CHECK on CREATE TABLE (One column)
Example
CREATE TABLE Persons (
 ID int NOT NULL,
 LastName varchar(255) NOT NULL,
 FirstName varchar(255),
 Age int,
 CHECK (Age>=18)
);
CHECK on CREATE TABLE (Multiple column)
Example
CREATE TABLE Persons (
 ID int NOT NULL,
 LastName varchar(255) NOT NULL,
 FirstName varchar(255),
 Age int,
 City varchar(255),
 CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
);
CHECK on ALTER TABLE (One column)
ALTER TABLE Persons ADD CHECK (Age>=18);
CHECK on ALTER TABLE (Multiple columns)
Database Management Systems Laboratory Class:TE(ComputerEngineering)
Departmentof ComputerEngineering,ZCOER,Narhe,Pune-41 Page33
ALTER TABLE Persons ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');
DROP a CHECK Constraint
ALTER TABLE Persons DROP CONSTRAINT CHK_PersonAge;

6) Default constraint
• The DEFAULT constraint is used to set a default value for a column.
• The default value will be added to all new records, if no other value is specified.
DEFAULT on CREATE TABLE
Example
CREATE TABLE Persons (
 ID int NOT NULL,
 LastName varchar(255) NOT NULL,
 FirstName varchar(255),
 Age int,
 City varchar(255) DEFAULT 'Sandnes'
);
DEFAULT on ALTER TABLE
Example
ALTER TABLE Persons ALTER City SET DEFAULT 'Sandnes';
DROP a DEFAULT Constraint
Example
ALTER TABLE Persons ALTER City DROP DEFAULT;